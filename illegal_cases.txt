#illegal cases

"%c" : 
valid_buff = void * only for 1c
illegal_flags ="#0 +"
legal_flags="-"
range true
precision false

"%s" :
valid_buff = void * to char *
illegal_flags="#0 +"
legal_flags="-"
range true
precision true

"%p" : 
valid_buff = void * to char *
illegal_flags="#0 +"
legal_flags="-"
range true
precision true

"%d" :
valid_buff= void * to (int to char*)
illegal_flags="#"
legal_flags="-+ 0"
range true
precision true

"%i" :
valid_buff= void * to (int to char*)
illegal_flags="#"
legal_flags="-+ 0"
range true
precision true


"%u" :
valid_buff= void * to (uint to char*)
illegal_flags="#"
legal_flags="-+ 0"
range true
precision true

"%x" :
valid_buff= void * to (uint to char*)
illegal_flags="+ "
legal_flags="-0#"
range true
precision true


"%X" :
valid_buff= void * to (uint to char*)
illegal_flags="+ "
legal_flags="-0#"
range true
precision true

"%%" :
valid_buff = (char * to char *)
illegal_flags= ALL
legal_flags = NONE
range false
precision false

prinft params legal disposition = "%{flags (optional)}{precision (optional)}{range (optional)}{cflag}"
flags cant be before or after range or before or after cflag

SPECIAL CASES= 1) '-' overwrite if 0 in flags
	       2) if precision defined at right value (after the range) :
			for any (char *) printf will return the values printed but wont print to stdout
			for any (int) printf will justify right and pad left with spaces (instead of left justify with 0 padding)
		3) precision without range = range is set to 0;	
		4) + overwrites ' ' if both in flags;
 

#logic
1) while loop through str
2) if str[index] is a %
3) send the string (with a pointer to the index) through parse function()
4) the parse function will check for convertflag first (parsing must stop if cflag encountered)
5) if no convertflag is found, return ERROR
5.1) else, convert the va_argument with the flag and init prt_piece->string to the converted string
6) then the parse function will check for a precision (boolean) and return 0 or 1
7) then the function will check for a range (0 if the range is empty || range is 1-int) return range
8) then the function will check for flags and put them in a char
9) then the function will check if the flags are valid according check_flag_valid(legal_flags (previously initialized), convertflag)
10) initialize the prt_t object and send the object to the corresponding function
11) add the prt_object to an array of prt_objects
12) loop ends
13) free all the prt_objects and the array
14) return the integer

